//Intro Node.jsüëç
Q: 1
Node.js Calculator
Overview
Create a command line argument-based calculator using Node.js that takes in mathematical operations and numbers as arguments from the terminal and provides the appropriate output.
Detailed Explanation
Topics
Taking input from terminal.
Crypto module.
Node.js basics.
Setup Guidelines and Instructions
The code should be written in Node.js.
Use process.argv property to retrieve the command line arguments passed to the script.
Use a switch statement or if-else statement to check the first argument (operation) and perform the appropriate calculation based on the remaining arguments.
Use the built-in crypto module and its "randomBytes()" method to generate a random number of the desired length (if provided as an argument).
Use console.log() to output the result of the calculation.
Handle cases where the wrong number of arguments or invalid operations are passed.
Add comments throughout your code to explain the logic behind each step.
you can use any node version that works for you ( 14+ )
Problem Statement
The calculator should support the following operations (commands for the particular operation are given in "()", use those commands only ):
addition ( add )
subtraction ( sub )
multiplication ( mult )
division ( divide )
sine ( sin )
cosine ( cos )
tangent ( tan )
random number generation ( random ) (optional)
The code should use the built-in crypto module to generate random numbers, and should also have the capability to take in an additional argument for determining the length of the generated random number (in the random operation if the length is not provided it should show the "Provide length for random number generation." message (without quote ).
Hint: can use "crypto.randomBytes" function and convert to ".toString("binary")"
For example, running the command node index.js add 1 2 should return 3, and running the command node index.js random should give the message node index.js random 15 should generate a random number of the given length (ok not to show in a proper integer format).
Your solution should be well-organized and easy to understand, with clear and concise comments explaining the logic behind each step.
Submission Guidelines
Correct implementation of the mathematical operations.
Proper handling of command line arguments.
Proper implementation of random number generation.
Proper handling of edge cases.
Code readability and organization.
Comments explaining the logic behind each step.
Sample file
// index.js
//  import the crypto module
//  get a commands using process.argv
// complete the  function
switch (operation) {
  
  default:
    console.log("Invalid operation");
}

//Modules in Node.js
Q: 1üëç
Node.js File Editor
Overview
Create a Node.js program that allows for basic file manipulation.The program should take command line arguments to specify the desired operation (command for the particular operation are given in "()" , use those commands only ):
 - reading ( read )
 - deleting ( delete )
 - creating ( create )
 - appending ( append )
 - rename ( rename )
 - list ( list )
and the file or directory to be affected. For example, running 'node index.js read test.txt' should output the contents of the file 'test.txt', and 'node index.js append test.txt CONTENT' should append the string 'CONTENT' to the end of the file. Additionally, the program should support renaming files and listing the contents of a directory, for example, 'node index.js rename test.txt new.txt' and 'node index.js list .' respectively.
Detailed Explanation
Topics
Taking input from terminal.
File System Module.
Node.js basics.
Setup Guidelines and Instructions
The code should be written in Node.js.
Use process.argv property to retrieve the command line arguments passed to the script.
Use console.log() to output the result of the calculation.
Handle cases where the wrong number of arguments or invalid operations are passed.
Add comments throughout your code to explain the logic behind each step.
you can use any node version that works for you ( 14+ )
Problem Statement
Create a file called "test.txt" in the same directory as your Node.js program and add some text to it.
Input: node index.js read test.txt
Expected output: The contents of the file "test.txt"
in the same "test.txt" directory as your Node.js program and add some text to it.(the new text should always be append in a new line)
Input: node index.js append "new content" test.txt
Expected output: "Content appended to the file 'test.txt'"
Create a file called "test.txt" in the same directory as your Node.js program and add some text to it.
Input: node index.js delete test.txt
Expected output: "File 'test.txt' deleted"
Create a file called "test.txt" in the same directory as your Node.js program
Input: node index.js create test.txt
Expected output: "File 'test.txt' created"
Create a file called "test.txt" in the same directory as your Node.js program and add some text to it.
Input: node index.js rename test.txt new.txt
Expected output: "File 'test.txt' renamed to 'new.txt'"
List of all files and directories in current dir
Input: node index.js list .
Expected output: A list of all files and directories in the current directory.
Submission Guidelines
Correct implementation of the mathematical operations.
Proper handling of command line arguments.
Proper implementation of random number generation.
Proper handling of edge cases.
Code readability and organization.
Comments explaining the logic behind each step.
Sample Index file
const path = require("path");
const operation = process.argv[2];
const file = process.argv[3];
const content = process.argv[4];
switch (operation) {
  // complete the fillowing function.
    
  default:
    console.log(`Invalid operation '${operation}'`);
}


Q: 2üëç
Submission Instructions:
Please submit the Masai Repo Link.
Node.js Modules Exploration
This assignment helps in exploration of modules in NodeJs, you are open to refer all the documentations
Instructions
Explore the crypto module and then encrypt the string "Hello, Good Morning" and generate an random string using UUID
Explore the stream module and handle stream to read large txt files (say siz 1mb & more), compare it with normal file system read function, print the time taken the stream and fs read funtion
Explore the OS module and print all the details of your system.
Code all the module functions in the index.js
Use Command Line Arguments to run all the functions and provide necessary inputs in the command line.
