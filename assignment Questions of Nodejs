//Intro Node.jsüëç
Q: 1
Node.js Calculator
Overview
Create a command line argument-based calculator using Node.js that takes in mathematical operations and numbers as arguments from the terminal and provides the appropriate output.
Detailed Explanation
Topics
Taking input from terminal.
Crypto module.
Node.js basics.
Setup Guidelines and Instructions
The code should be written in Node.js.
Use process.argv property to retrieve the command line arguments passed to the script.
Use a switch statement or if-else statement to check the first argument (operation) and perform the appropriate calculation based on the remaining arguments.
Use the built-in crypto module and its "randomBytes()" method to generate a random number of the desired length (if provided as an argument).
Use console.log() to output the result of the calculation.
Handle cases where the wrong number of arguments or invalid operations are passed.
Add comments throughout your code to explain the logic behind each step.
you can use any node version that works for you ( 14+ )
Problem Statement
The calculator should support the following operations (commands for the particular operation are given in "()", use those commands only ):
addition ( add )
subtraction ( sub )
multiplication ( mult )
division ( divide )
sine ( sin )
cosine ( cos )
tangent ( tan )
random number generation ( random ) (optional)
The code should use the built-in crypto module to generate random numbers, and should also have the capability to take in an additional argument for determining the length of the generated random number (in the random operation if the length is not provided it should show the "Provide length for random number generation." message (without quote ).
Hint: can use "crypto.randomBytes" function and convert to ".toString("binary")"
For example, running the command node index.js add 1 2 should return 3, and running the command node index.js random should give the message node index.js random 15 should generate a random number of the given length (ok not to show in a proper integer format).
Your solution should be well-organized and easy to understand, with clear and concise comments explaining the logic behind each step.
Submission Guidelines
Correct implementation of the mathematical operations.
Proper handling of command line arguments.
Proper implementation of random number generation.
Proper handling of edge cases.
Code readability and organization.
Comments explaining the logic behind each step.
Sample file
// index.js
//  import the crypto module
//  get a commands using process.argv
// complete the  function
switch (operation) {
  
  default:
    console.log("Invalid operation");
}

//Modules in Node.js
Q: 1üëç
Node.js File Editor
Overview
Create a Node.js program that allows for basic file manipulation.The program should take command line arguments to specify the desired operation (command for the particular operation are given in "()" , use those commands only ):
 - reading ( read )
 - deleting ( delete )
 - creating ( create )
 - appending ( append )
 - rename ( rename )
 - list ( list )
and the file or directory to be affected. For example, running 'node index.js read test.txt' should output the contents of the file 'test.txt', and 'node index.js append test.txt CONTENT' should append the string 'CONTENT' to the end of the file. Additionally, the program should support renaming files and listing the contents of a directory, for example, 'node index.js rename test.txt new.txt' and 'node index.js list .' respectively.
Detailed Explanation
Topics
Taking input from terminal.
File System Module.
Node.js basics.
Setup Guidelines and Instructions
The code should be written in Node.js.
Use process.argv property to retrieve the command line arguments passed to the script.
Use console.log() to output the result of the calculation.
Handle cases where the wrong number of arguments or invalid operations are passed.
Add comments throughout your code to explain the logic behind each step.
you can use any node version that works for you ( 14+ )
Problem Statement
Create a file called "test.txt" in the same directory as your Node.js program and add some text to it.
Input: node index.js read test.txt
Expected output: The contents of the file "test.txt"
in the same "test.txt" directory as your Node.js program and add some text to it.(the new text should always be append in a new line)
Input: node index.js append "new content" test.txt
Expected output: "Content appended to the file 'test.txt'"
Create a file called "test.txt" in the same directory as your Node.js program and add some text to it.
Input: node index.js delete test.txt
Expected output: "File 'test.txt' deleted"
Create a file called "test.txt" in the same directory as your Node.js program
Input: node index.js create test.txt
Expected output: "File 'test.txt' created"
Create a file called "test.txt" in the same directory as your Node.js program and add some text to it.
Input: node index.js rename test.txt new.txt
Expected output: "File 'test.txt' renamed to 'new.txt'"
List of all files and directories in current dir
Input: node index.js list .
Expected output: A list of all files and directories in the current directory.
Submission Guidelines
Correct implementation of the mathematical operations.
Proper handling of command line arguments.
Proper implementation of random number generation.
Proper handling of edge cases.
Code readability and organization.
Comments explaining the logic behind each step.
Sample Index file
const path = require("path");
const operation = process.argv[2];
const file = process.argv[3];
const content = process.argv[4];
switch (operation) {
  // complete the fillowing function.
    
  default:
    console.log(`Invalid operation '${operation}'`);
}


Q: 2üëç
Submission Instructions:
Please submit the Masai Repo Link.
Node.js Modules Exploration
This assignment helps in exploration of modules in NodeJs, you are open to refer all the documentations
Instructions
Explore the crypto module and then encrypt the string "Hello, Good Morning" and generate an random string using UUID
Explore the stream module and handle stream to read large txt files (say siz 1mb & more), compare it with normal file system read function, print the time taken the stream and fs read funtion
Explore the OS module and print all the details of your system.
Code all the module functions in the index.js
Use Command Line Arguments to run all the functions and provide necessary inputs in the command line.

//HTTP & Server
Q: 3üëç
Submission Instructions:
Please submit the Masai Repo Link.
HTTP
This assignment helps in exploration of HTTP module in NodeJs, you are open to refer all the documentations
Instructions
Explore HTTP module and then create an http server, run the server on the port 8080
Create End Points/Routes like /, /aboutus, /contactus, /index
Send the response as welcome to Home Page for / route
Send the response as welcome to About Page in h3 tag for /aboutus route
Send the response as contact us at www.masaichool.com in a tag for /aboutus route, on click on the anchir tag, it should open Masai Website
Incase of /index route, read the index.js file and send the same as response
Incase of any other routes not specified as above, should give the response as 404 Not Found
Ensure you are sending proper status code along with response.


//CRUD OPERATIONS
Q: 4üëç
CRUD Operations with HTTP Server and db.json
Description:
You are tasked with building a basic HTTP server to handle CRUD (Create, Read, Update, Delete) operations. The server will interact with a db.json file to store, update, and retrieve data.

Requirements:
Database (db.json)

Use a db.json file to simulate a database. This file will store user records.
Each record will have the following fields:
id (unique identifier)
name (string)
email (string)
password (string)
phone (string)
Example of db.json content:

[
  {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "password": "password123",
    "phone": "123-456-7890"
  },
  {
    "id": 2,
    "name": "Jane Smith",
    "email": "jane@example.com",
    "password": "password456",
    "phone": "987-654-3210"
  }
]
Operations: Your HTTP server should support the following CRUD operations:

a) Create (POST /create):
The client will send a request with the following data:

name: (string)
email: (string)
password: (string)
phone: (string)
The server will create a new record with an auto-generated id and return the created record, excluding the password in the response.

Example Request:

{
  "name": "Alice",
  "email": "alice@example.com",
  "password": "alicepassword",
  "phone": "555-555-5555"
}
Example Response:

{
  "id": 3,
  "name": "Alice",
  "email": "alice@example.com",
  "phone": "555-555-5555"
}
b) Read (GET /read):
The server will return all records from the db.json file.
Important: The password field should be excluded in the response.
Example Response:

[
  {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "phone": "123-456-7890"
  },
  {
    "id": 2,
    "name": "Jane Smith",
    "email": "jane@example.com",
    "phone": "987-654-3210"
  }
]
c) Update (PUT /update/:id):
The client will send updated data for a record identified by its id. The updated data should include:

name: (string)
email: (string)
phone: (string)
The server will return the updated record with the id.

Example Request:

{
  "name": "John Doe",
  "email": "john_new@example.com",
  "phone": "555-555-5555"
}
Example Response:

{
  "id": 1,
  "name": "John Doe",
  "email": "john_new@example.com",
  "phone": "555-555-5555"
}
d) Delete (DELETE /delete/:id):
The client will specify an id to delete a record from the database.

The server will delete the record and return a success message.

Example Response:

{ "message": "Record deleted successfully" }
Password Handling:

When creating a record (POST /create), the password should be included in the request, but it should only be stored in the db.json file.
When fetching records (GET /read), the password field should not be included in the response.
Error Handling:

If a GET, PUT, or DELETE request is made for a record that does not exist, return a suitable error message (e.g., 404 Not Found).
File Updates:

Ensure that every operation (Create, Update, Delete) updates the db.json file accordingly.
Example Usage:
1. Create a new user:
POST /create:
Request:
{
  "name": "Alice",
  "email": "alice@example.com",
  "password": "alicepassword",
  "phone": "555-555-5555"
}
Response:
{
  "id": 3,
  "name": "Alice",
  "email": "alice@example.com",
  "phone": "555-555-5555"
}
2. Read all users:
GET /read:
Response:
[
  {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "phone": "123-456-7890"
  },
  {
    "id": 2,
    "name": "Jane Smith",
    "email": "jane@example.com",
    "phone": "987-654-3210"
  }
]
3. Update a user's information:
PUT /update/1:
Request:
{
  "name": "John Doe",
  "email": "john_new@example.com",
  "phone": "555-555-5555"
}
Response:
{
  "id": 1,
  "name": "John Doe",
  "email": "john_new@example.com",
  "phone": "555-555-5555"
}
4. Delete a user:
DELETE /delete/1:
Response:
{ "message": "Record deleted successfully" }


//Express
Q: 5üëç
Submission Instructions:
Please submit the Masai Repo Link.

Simple Express Server
This assignment helps in exploration of Express module in NodeJs, you are open to refer all the documentations

Instructions
You need to build a simple Express.js web server that performs the following tasks:

Create an Express.js application that listens on port 3000. The server should print "Server is running on http://localhost:3000" when it starts. Handle Different Routes:

Set up the following routes:

GET /: When the root URL is accessed, the server should respond with the text "Welcome to the Express.js Server!".

GET /about: When /about is accessed, the server should respond with the text "This is a simple web server built using Express.js.".

GET /contact: When /contact is accessed, the server should respond with a JSON object containing contact details:

 ```
 {
 "email": "student@example.com",
 "phone": "123-456-7890"
 }
 ```
GET /random: When /random is accessed, the server should respond with a random number between 1 and 100. Error Handling:

Implement a default route to handle any undefined routes. If the user tries to access a route that does not exist, the server should respond with a 404 status and the message "404 - Page Not Found". Test Your Server:

Start the server and test all the routes by accessing them in your web browser or using tools like Postman.

Q: 6üëç
Express Todo CRUD
Overview
In this particular problem statement, you have to create basic APIs for a Todo Application, Your APIs should be able to perform CRUD oprations on the todo data. Create a db.json file and add radom todos as per your creativity. consider this as your database.

Detailed Explanation
Topics
HTTP Methods.
Express.
File System Module.
CRUD Operations.
Using External Modules.
Nodemon.
Setup Guidelines and Instructions
The code should be written in Node.js.
Add comments throughout your code to explain the logic behind each step.
Initialize a new node project.
Install express to manage APIs.
nodemon should be used to run the server.
Write the nodemon script to handle the server running process.
Problem Statement
Create a file db.json and add todos data as per your creativity but follow the following structure.
  {
    "todos" : [
      {},
      {},
      {},
    ]
  }
An API to get all the todos present in the database.
An API to add a new todo in the database.
An API to update the status of all the todos that have even ID from false to true. This will work only if the todo with even ID has a status as false.
An API to Delete all the todos whose status is true.

